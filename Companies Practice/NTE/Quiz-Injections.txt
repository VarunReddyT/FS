What is SQL Injection?  
A. A method to securely access a database  
B. A technique used to bypass authentication and manipulate database queries  
C. A way to encrypt SQL queries  
D. A tool to optimize database performance  
ANSWER: B  

Which of the following SQL queries is vulnerable to SQL Injection?  
A. SELECT * FROM users WHERE username = ? AND password = ?;  
B. SELECT * FROM users WHERE username = 'admin' AND password = 'admin';  
C. SELECT * FROM users WHERE username = '" + user_input + "' AND password = '" + pass_input + "';  
D. PREPARE stmt FROM 'SELECT * FROM users WHERE username = ? AND password = ?';  
ANSWER: C  

Which payload can be used to bypass authentication in an SQL injection attack?  
A. ' OR 1=1 --   
B. ' AND DROP TABLE users;  
C. '; SELECT * FROM passwords;  
D. ' OR username='admin' AND password='admin';  
ANSWER: A  

What is the best way to protect a Node.js MySQL database from SQL Injection?  
A. Use eval() to sanitize user input  
B. Use prepared statements and parameterized queries  
C. Validate user input with client-side JavaScript only  
D. Store passwords in plain text for easy authentication  
ANSWER: B  

Which of the following best describes Stored XSS?  
A. A script is executed immediately when injected  
B. The malicious script is stored in the database and executed when loaded by a user  
C. A script is embedded in a URL and executed when the victim clicks the link  
D. XSS that only works on outdated browsers  
ANSWER: B  

Why does this React component not execute XSS payloads?  
A. React automatically escapes input to prevent script execution  
B. dangerouslySetInnerHTML is required to execute scripts  
C. The browser blocks all inline scripts by default  
D. The comment data is stored in a secure database  
ANSWER: A  

How can a developer protect against XSS attacks in a MERN stack app?  
A. Use dangerouslySetInnerHTML without sanitization  
B. Sanitize user input using DOMPurify or server-side escaping  
C. Allow script execution inside innerHTML  
D. Use inline JavaScript to filter malicious code  
ANSWER: B  

What does `--` in an SQL Injection attack do?  
A. Encrypts user input  
B. Comments out the rest of the SQL query  
C. Adds an additional condition to the query  
D. Increases query execution speed  
ANSWER: B  

Which of the following is NOT a way to prevent SQL Injection?  
A. Using Prepared Statements  
B. Escaping user input before using it in a query  
C. Using DOMPurify for sanitization  
D. Using ORMs like Sequelize or Mongoose  
ANSWER: C  

What is the most common way to fix XSS vulnerabilities?  
A. Storing scripts in the database  
B. Using DOMPurify to sanitize user input  
C. Using JavaScript's eval() function  
D. Allowing only admin users to enter scripts  
ANSWER: B  

Which of the following XSS payloads is most likely to bypass filtering?  
A. <script>alert('XSS')</script>  
B. <img src=x onerror=alert('XSS')>  
C. <iframe src=javascript:alert('XSS')>  
D. All of the above  
ANSWER: D  

What does the dangerouslySetInnerHTML property in React do?  
A. Blocks XSS automatically  
B. Allows raw HTML to be inserted into the page  
C. Encrypts JavaScript code  
D. Prevents all forms of user input  
ANSWER: B  

How does the fixed version of the XSS Demo prevent XSS?  
A. By blocking all comments containing <script>  
B. By using DOMPurify to sanitize both input and output  
C. By encoding all data before storing it  
D. By only allowing administrators to post comments  
ANSWER: B  

What is the main difference between SQL Injection and XSS?  
A. SQL Injection targets databases, while XSS targets browsers  
B. SQL Injection is always more dangerous than XSS  
C. XSS can modify SQL databases  
D. Both are prevented using the same techniques  
ANSWER: A  

What additional security measures can prevent XSS attacks?  
A. Content Security Policy (CSP)  
B. Escaping special characters (<, >)  
C. Sanitizing user input before storing it  
D. All of the above  
ANSWER: D  
